@model PowerBIEmbedded_AppOwnsData.Models.EmbedConfig

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="https://npmcdn.com/es6-promise@3.2.1"></script>
<script src="~/scripts/powerbi.js"></script>
<script src="~/scripts/papaparse.min.js"></script>
<script src="~/scripts/jquery.csv.js"></script>

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div id="errorWrapper">
        <h2>
            Error
        </h2>
        <pre>
            @Model.ErrorMessage
        </pre>
    </div>

    return;
}

<button type="button" id="toggleEdit" class="btn btn-sm">Toggle Edit Mode</button>
<button type="button" id="fullScreen" class="btn btn-sm">Full Screen</button>
<button type="button" id="export" class="btn btn-sm">Export</button>

<h2>Embedded Report</h2>
<div>
    The following report is the report in Workspace "PBIE Demo"<br/><br/>
</div>
<div id="embedContainer"></div>

<script>
    // Read embed application token from Model
    var accessToken = "@Model.EmbedToken.Token";

    // Read embed URL from Model
    var embedUrl = "@Html.Raw(Model.EmbedUrl)";

    // Read report Id from Model
    var embedReportId = "@Model.Id";

    // Get models. models contains enums that can be used.
    var models = window['powerbi-client'].models;

    // Embed configuration used to describe the what and how to embed.
    // This object is used when calling powerbi.embed.
    // This also includes settings and options such as filters.
    // You can find more information at https://github.com/Microsoft/PowerBI-JavaScript/wiki/Embed-Configuration-Details.
    var config = {
        type: 'report',
        tokenType: models.TokenType.Embed,
        accessToken: accessToken,
        embedUrl: embedUrl,
        id: embedReportId,
        permissions: models.Permissions.All,
        viewMode: models.ViewMode.View,
        settings: {
            filterPaneEnabled: true,
            navContentPaneEnabled: true
        }
    };

    // Get a reference to the embedded report HTML element
    var reportContainer = $('#embedContainer')[0];

    if ("@Model.Username" != "") {
        $("#RLS").prop('checked', true);
        $("#RLSdiv").show();
    }
    else
    {
        $("#RLS").prop('checked', false);
        $("#RLSdiv").hide();
    }

    if ("@Model.IsEffectiveIdentityRequired.GetValueOrDefault()" == "True") {
        $("#noRLSdiv").hide();
        $("#RLS").removeAttr("disabled");
        $("#RLS").change(function () {
            if ($(this).is(":checked")) {
                $("#RLSdiv").show(300);
            } else {
                $("#RLSdiv").hide(200);
            }
        });
    }
    else
    {
        $("#noRLSdiv").show();
    }
    // Embed the report and display it within the div container.
    var report = powerbi.embed(reportContainer, config);

    viewMode = 'view';
     $("#toggleEdit").click(function () {
    // toggle between view and edit mode
    viewMode = (viewMode == "view") ? "edit" : "view";
    report.switchMode(viewMode);
    // show filter pane when entering edit mode
    var showFilterPane = (viewMode == "edit");
    report.updateSettings({
      "filterPaneEnabled": showFilterPane
    });
  });

    $("#fullScreen").click(function () {
        console.log("full screen");
    report.fullscreen();
  });

    $("#export").click(
        function () {
            console.log("Exporting");
            // Retrieve the page collection and get the visuals for the first page.
            report.getPages()
                .then(function(pages) {
                    // console.log(pages.length)
                    // Retrieve active page.
                    var activePages = pages.filter(function(page) {
                        return page.isActive
                    });
                    // console.log(activePages.length)
                    var activePage = activePages[0];
                    console.log(activePage.name);

                    activePage.getVisuals()
                        .then(function (visuals) {

                            if (activePage.name == "ReportSection1") {
                                // Retrieve the target visual.
                                visual = visuals.filter(function (v) {
                                    return v.title == "Quantity, Unit Price and Sales by State"
                                })[0]

                            } else {
                                visual = visuals[0]
                            }
                            
                            
                            // Exports visual data
                            visual.exportData(models.ExportDataType.Summarized)
                                .then(function (result) {
                                    console.log(result)
                                    var json;
                                    if (activePage.name == "ReportSection1") {
                                        json = $.csv.toObjects(result.data.replace("Unit Price", "Unit_Price"))
                                    } else {
                                        console.log("not on target page");
                                    }
                                    
                                    json.forEach(function (row) {
                                        console.log(row)
                                        var xhr = new XMLHttpRequest();
                                        var url = "/sales/postdata";
                                        if (activePage.name == "ReportSection1") {
                                            url = "/sales/postdata";
                                        } else if (activePage.name == "ReportSection1d2fa0ed232771346479") {
                                            url = "/rating/postdata";
                                        }
                                   
                                        xhr.open("POST", url, true);
                                        xhr.setRequestHeader("Content-Type", "application/json");
                                        xhr.onreadystatechange = function () {
                                            if (xhr.readyState === 4 && xhr.status === 200) {
                                                //var json = JSON.parse(xhr.responseText);
                                                console.log("ready to send");
                                            }
                                        };
                                        xhr.send(JSON.stringify(row));
                                        xhr.onloadend = function () {
                                            console.log('sended')
                                        }
                                    })
                                    
                                    
                                })
                                .catch(function(errors) {
                                    console.log(errors);
                                });
                        })
                        .catch(function(errors) {
                            console.log(errors);
                        });
                })
                .catch(function(errors) {
                    Log.log(errors);
                });

            
        }
    )


</script>